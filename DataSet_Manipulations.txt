WHAT TO DELETE
-------------------------------------------
MALE_PLAYER:
-player_url
-fifa_update
-update_as_of
-week_foot
-skill_moves
-international_reputation
-work_rate
-body_type
-real_face
-player_tags
-player_traits
- all the last 27 attributes like ls,st,..
Tot deleted : 42 over 108 = 66 attributes to keep
------------------------------------------
Same for FEMALE_PLAYER
------------------------------------------
MALE_COACHES:
-coach_url
-dob
-nation_flag_url
Tot deleted : 3 over 8 = 5 attributes to keep
---------------------------------------------
Same for FEMALE_COACHES
---------------------------------------------
MALE_TEAMS:
-team_url
-fifa_update
-update_as_of
-rival_team
-international_prestige
-domestic_prestige
-starting_xi_avarage_age
-whole_team_avarage_age
-def_style
-def_team_width
-def_team_depth
-off_build_up_play
-off_chance_creation
Tot deleted: 13 over 41 = 28 attributes to keep
-----------------------------------------------
Same for FEMALE_TEAMS





____________________________________________________________________________________
CODE
_____________________________________________________________________________________
db.male_players.aggregate([
  // Lookup matching teams by club ID, club name, and fifa_version
  {
    $lookup: {
      from: "male_teams",
      let: { 
        clubId: "$club_team_id", 
        clubName: "$club_name", 
        vivaV: "$fifa_version" 
      },
      pipeline: [
        {
          $match: {
            $expr: {
              $and: [
                { $eq: ["$team_id", "$$clubId"] }, // Match by team_id
                { $eq: ["$team_name", "$$clubName"] }, // Match by team_name
                { $eq: ["$fifa_version", "$$vivaV"] } // Match by fifa_version
              ]
            }
          }
        }
      ],
      as: "team_info"
    }
  },

  { 
    $unwind: { 
      path: "$team_info", 
      preserveNullAndEmptyArrays: true 
    } 
  },

  // Group by player_id to consolidate entries
  {
    $group: {
      _id: "$player_id",
      player_id: {$first: "$player_id"},
      original_id: { $first: "$_id" },
      short_name: { $first: "$short_name" },
      long_name: { $first: "$long_name" },
      age: { $first: "$age" },
      dob: { $first: "$dob" },
      height_cm: { $first: "$height_cm" },
      weight_kg: { $first: "$weight_kg" },
      preferred_foot: { $first: "$preferred_foot" },
      nationality_id: { $first: "$nationality_id" },
      nationality_name: { $first: "$nationality_name" },
      gender: { $first: "male" },

      fifaStats: {
        $push: {
          fifa_version: "$fifa_version",
          player_positions: "$player_positions",
          overall: "$overall",
          potential: "$potential",
          value_eur: "$value_eur",
          wage_eur: "$wage_eur",
          club_position: "$club_position",
          club_jersey_number: "$club_jersey_number",
          club_contract_valid_until_year: "$club_contract_valid_until_year",
          league_name: "$league_name",
          league_level: "$league_level",
          nation_team_id: "$nation_team_id",
          nation_position: "$nation_position",
          nation_jersey_number: "$nation_jersey_number",
          release_clause_eur: "$release_clause_eur",
          team: {
            team_mongo_id: "$team_info._id",
            team_name: "$team_info.team_name",
            team_id: "$team_info.team_id"
          },

          // All player stats preserved
          pace: "$pace",
          shooting: "$shooting",
          passing: "$passing",
          dribbling: "$dribbling",
          defending: "$defending",
          physic: "$physic",
          attacking_crossing: "$attacking_crossing",
          attacking_finishing: "$attacking_finishing",
          attacking_heading_accuracy: "$attacking_heading_accuracy",
          attacking_short_passing: "$attacking_short_passing",
          attacking_volleys: "$attacking_volleys",
          skill_dribbling: "$skill_dribbling",
          skill_curve: "$skill_curve",
          skill_fk_accuracy: "$skill_fk_accuracy",
          skill_long_passing: "$skill_long_passing",
          skill_ball_control: "$skill_ball_control",
          movement_acceleration: "$movement_acceleration",
          movement_sprint_speed: "$movement_sprint_speed",
          movement_agility: "$movement_agility",
          movement_reactions: "$movement_reactions",
          movement_balance: "$movement_balance",
          power_shot_power: "$power_shot_power",
          power_jumping: "$power_jumping",
          power_stamina: "$power_stamina",
          power_strength: "$power_strength",
          power_long_shots: "$power_long_shots",
          mentality_aggression: "$mentality_aggression",
          mentality_interceptions: "$mentality_interceptions",
          mentality_positioning: "$mentality_positioning",
          mentality_vision: "$mentality_vision",
          mentality_penalties: "$mentality_penalties",
          mentality_composure: "$mentality_composure",
          defending_marking_awareness: "$defending_marking_awareness",
          defending_standing_tackle: "$defending_standing_tackle",
          defending_sliding_tackle: "$defending_sliding_tackle",
          goalkeeping_diving: "$goalkeeping_diving",
          goalkeeping_handling: "$goalkeeping_handling",
          goalkeeping_kicking: "$goalkeeping_kicking",
          goalkeeping_positioning: "$goalkeeping_positioning",
          goalkeeping_reflexes: "$goalkeeping_reflexes"
        }
      }
    }
  },

  // Set the _id back to the original _id
  {
    $set: {
      _id: "$original_id"
    }
  },

  {
    $unset: ["original_id"]
  },

  // Merge into final collection
  {
    $merge: {
      into: "Players",
      whenMatched: "merge",
      whenNotMatched: "insert"
    }
  }
]);



_____________________________________________________________________________

  db.male_coaches.aggregate([
    {
      $lookup: {
        from: "male_teams",
        localField: "coach_id",
        foreignField: "coach_id",
        as: "team_info"
      }
    },
    {
      $unwind: { path: "$team_info", preserveNullAndEmptyArrays: true }
    },
    {
      $group: {
        _id: "$coach_id",
        coach_id: { $first: "$coach_id" },
        short_name: { $first: "$short_name" },
        long_name: { $first: "$long_name" },
        nationality_name: { $first: "$nationality_name" },
        gender: { $first: "male" },
        team: {
          $push: {
            fifa_version: "$team_info.fifa_version",
            team_mongo_id: "$team_info._id",
            team_id: "$team_info.team_id",
            team_name: "$team_info.team_name"
          }
        }
      }
    },
    {
      $set: {
        _id: "$original_id"
      }
    },
    {
      $unset: ["original_id"]
    },
    {
      $merge: {
        into: "Coaches",
        whenMatched: "merge",
        whenNotMatched: "insert"
      }
    }
  ])



_____________________________________________________________________________________________
db.male_teams.aggregate([
  {
    $lookup: {
      from: "male_coaches",
      localField: "coach_id",
      foreignField: "coach_id",
      as: "coach_info"
    }
  },
  { $unwind: { path: "$coach_info", preserveNullAndEmptyArrays: true } },

  {
    $group: {
      _id: "$team_id",
      original_id: { $first: "$_id" },
      team_id: { $first: "$team_id" },
      team_name: { $first: "$team_name" },
      gender: { $first: "male" },
      league_id: { $first: "$league_id" },
      league_name: { $first: "$league_name" },
      league_level: { $first: "$league_level" },
      nationality_id: { $first: "$nationality_id" },
      nationality_name: { $first: "$nationality_name" },
      fifaStats: {
        $push: {
          fifa_version: "$fifa_version",
          home_stadium: "$home_stadium",
          overall: "$overall",
          attack: "$attack",
          midfield: "$midfield",
          defence: "$defence",
          club_worth_eur: "$club_worth_eur",
          coach: {
            coach_id: "$coach_id",
            coach_mongo_id:"$coach_info._id",
            coach_name: "$coach_info.long_name"
          }
        }
      }
    }
  },
  {
    $set: {
      _id: "$original_id"
    }
  },
  {
    $unset: ["original_id"]
  },
  {
    $merge: {
      into: "Teams",
      whenMatched: "merge",
      whenNotMatched: "insert"
    }
  }
])



________________________________________________________________________________________________________________________________________
---------After the second aggregation-----------------
db.Coaches.updateMany(
  {}, // Empty filter to match all documents
  [
    {
      $set: {
        team: {
          $map: {
            input: "$team",
            as: "t",
            in: {
              team_mongo_id: "$$t.team_mongo_id", // Retain team_mongo_id
              team_name: "$$t.team_name",           // Retain team_name
              fifa_version: "$$t.fifa_version"
            }
          }
        }
      }
    },
    {
      $unset: "coach_id" // Unset coach_id field from the document
    }
  ]
);

_____________________________________________________________________________________________________________________________________
---------After the first aggregation-----------------
db.Coaches.aggregate([
  // Match documents with at least one team.team_id
  {
    $match: {
      "team.team_id": { $exists: true }
    }
  },

  // Extract all team_ids from the array
  {
    $addFields: {
      teamIds: {
        $map: {
          input: "$team",
          as: "t",
          in: "$$t.team_id"
        }
      }
    }
  },

  // Get unique team_ids
  {
    $addFields: {
      uniqueTeamIds: { $setUnion: "$teamIds" }
    }
  },

  // Only keep docs where all team_ids are the same (length = 1)
  {
    $match: {
      $expr: { $eq: [{ $size: "$uniqueTeamIds" }, 1] }
    }
  },

  // Lookup the canonical team_mongo_id from Teams
  {
    $lookup: {
      from: "Teams",
      localField: "uniqueTeamIds.0",
      foreignField: "team_id",
      as: "matchedTeam"
    }
  },

  // Extract the canonical team _id
  {
    $addFields: {
      canonicalTeamMongoId: { $arrayElemAt: ["$matchedTeam._id", 0] }
    }
  },

  // Replace all team[i].team_mongo_id with the canonical one
  {
    $addFields: {
      team: {
        $map: {
          input: "$team",
          as: "t",
          in: {
            $mergeObjects: [
              "$$t",
              { team_mongo_id: "$canonicalTeamMongoId" }
            ]
          }
        }
      }
    }
  },

  // Cleanup temporary fields
  {
    $unset: ["teamIds", "uniqueTeamIds", "matchedTeam", "canonicalTeamMongoId"]
  },

  // Merge back into the Coaches collection
  {
    $merge: {
      into: "Coaches",
      whenMatched: "merge",
      whenNotMatched: "discard"
    }
  }
]);

________________________________________________________________________________________________________________________________________
---------After the second aggregation-----------------
db.Teams.updateMany(
  {}, // Empty filter to match all documents
  [
    {
      $set: {
        fifaStats: {
          $map: {
            input: "$fifaStats",
            as: "stat",
            in: {
              $mergeObjects: [
                "$$stat",
                {
                  coach: {
                    coach_mongo_id: "$$stat.coach.coach_mongo_id", 
                    coach_name: "$$stat.coach.coach_name"           
                  }
                }
              ]
            }
          }
        }
      }
    },
    {
      $unset: "team_id" 
    }
  ]
);

_____________________________________________________________________________________________________________________________________
---------After the first aggregation-----------------
db.Teams.aggregate([
  // Match Teams that have fifaStats with coach entries
  {
    $match: {
      "fifaStats.coach.coach_id": { $exists: true }
    }
  },

  // Step 1: Extract all coach_ids from fifaStats
  {
    $addFields: {
      coachIds: {
        $setUnion: {
          $map: {
            input: "$fifaStats",
            as: "fs",
            in: "$$fs.coach.coach_id"
          }
        }
      }
    }
  },

  // Step 2: Lookup canonical coach Mongo IDs from Coaches collection
  {
    $lookup: {
      from: "Coaches",
      let: { ids: "$coachIds" },
      pipeline: [
        {
          $match: {
            $expr: { $in: ["$coach_id", "$$ids"] }
          }
        },
        {
          $project: {
            _id: 1,
            coach_id: 1
          }
        }
      ],
      as: "canonicalCoaches"
    }
  },

  // Step 3: Build map { coach_id -> coach_mongo_id }
  {
    $addFields: {
      coachMap: {
        $arrayToObject: {
          $map: {
            input: "$canonicalCoaches",
            as: "c",
            in: {
              k: { $toString: "$$c.coach_id" },
              v: "$$c._id"
            }
          }
        }
      }
    }
  },

  // Step 4: Update fifaStats[].coach.coach_mongo_id using the map
  {
    $addFields: {
      fifaStats: {
        $map: {
          input: "$fifaStats",
          as: "fs",
          in: {
            $mergeObjects: [
              "$$fs",
              {
                coach: {
                  $mergeObjects: [
                    "$$fs.coach",
                    {
                      coach_mongo_id: {
                        $let: {
                          vars: {
                            entry: {
                              $first: {
                                $filter: {
                                  input: { $objectToArray: "$coachMap" },
                                  as: "pair",
                                  cond: {
                                    $eq: ["$$pair.k", { $toString: "$$fs.coach.coach_id" }]
                                  }
                                }
                              }
                            }
                          },
                          in: "$$entry.v"
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      }
    }
  },

  // Step 5: Cleanup helper fields
  {
    $unset: ["coachIds", "canonicalCoaches", "coachMap"]
  },

  // Step 6: Merge back into Teams collection
  {
    $merge: {
      into: "Teams",
      whenMatched: "merge",
      whenNotMatched: "discard"
    }
  }
]);


_____________________________________________________________________________________________________________________________________
---------After the first aggregation-----------------
db.Players.aggregate([
  // Step 1: Filter players where at least one fifaStats.team.team_id exists
  {
    $match: {
      "fifaStats.team.team_id": { $exists: true }
    }
  },

  // Step 2: Collect all team_ids from fifaStats
  {
    $addFields: {
      teamIds: {
        $setUnion: {
          $map: {
            input: "$fifaStats",
            as: "fs",
            in: "$$fs.team.team_id"
          }
        }
      }
    }
  },

  // Step 3: Lookup canonical team Mongo IDs from Teams collection
  {
    $lookup: {
      from: "Teams",
      let: { ids: "$teamIds" },
      pipeline: [
        {
          $match: {
            $expr: { $in: ["$team_id", "$$ids"] }
          }
        },
        {
          $project: {
            _id: 1,
            team_id: 1
          }
        }
      ],
      as: "canonicalTeams"
    }
  },

  // Step 4: Build map { team_id -> team_mongo_id }
  {
    $addFields: {
      canonicalTeamMap: {
        $arrayToObject: {
          $map: {
            input: "$canonicalTeams",
            as: "ct",
            in: {
              k: { $toString: "$$ct.team_id" },
              v: "$$ct._id"
            }
          }
        }
      }
    }
  },

  // Step 5: Update fifaStats[].team.team_mongo_id using the map
  {
    $addFields: {
      fifaStats: {
        $map: {
          input: "$fifaStats",
          as: "fs",
          in: {
            $mergeObjects: [
              "$$fs",
              {
                team: {
                  $mergeObjects: [
                    "$$fs.team",
                    {
                    team_mongo_id: {
                                  $let: {
    vars: {
      entry: {
        $first: {
          $filter: {
            input: { $objectToArray: "$canonicalTeamMap" },
            as: "pair",
            cond: {
              $eq: ["$$pair.k", { $toString: "$$fs.team.team_id" }]
            }
          }
        }
      }
    },
    in: "$$entry.v"
  }
}

                    }
                  ]
                }
              }
            ]
          }
        }
      }
    }
  },

  // Step 6: Clean up helper fields
  {
    $unset: ["teamIds", "canonicalTeams", "canonicalTeamMap"]
  },

  // Step 7: Merge updated docs back into Players collection
  {
    $merge: {
      into: "Players",
      whenMatched: "merge",
      whenNotMatched: "discard"
    }
  }
]);


________________________________________________________________________________________________________________________________________
---------After the second aggregation-----------------
db.Players.updateMany(
  {}, // Empty filter to match all documents
  [
    {
      $set: {
        fifaStats: {
          $map: {
            input: "$fifaStats",
            as: "stat",
            in: {
              $mergeObjects: [
                "$$stat",
                {
                  team: {
                    team_mongo_id: "$$stat.team.team_mongo_id", // Retain team_mongo_id
                    team_name: "$$stat.team.team_name"           // Retain team_name
                  }
                }
              ]
            }
          }
        }
      }
    },
    {
      $unset: "player_id" // Unset coach_id field from the document
    }
  ]
);

______________________________________________________________________________________________________________________________

After all map operations

Fill all the fifa stats array in player document, with the amount objects to reach 10, each one of the added
objects contains default values, in order to have document that occupuy a constant size on the disk

db.Players.updateMany(
  {}, // Filter for all documents
  [
    {
      $set: {
        fifaStats: {
          $concatArrays: [
            "$fifaStats", // This is the existing array
            {
              $map: {
                input: {
                  $range: [
                    0,
                    {
                      $subtract: [
                        10,
                        { $size: "$fifaStats" }
                      ]
                    }
                  ]
                },
                as: "i",
                in: { // Default object structure
                  fifa_version: -1,
                  player_positions: "NA",
                  overall: -1,
                  potential: -1,
                  value_eur: -1,
                  wage_eur: -1,
                  club_position: "NA",
                  club_jersey_number: -1,
                  club_contract_valid_until_year: 2999,
                  league_name: "DefaultLeague",
                  league_level: -1,
                  team: {
                    team_mongo_id: "XXXXXXXXXXXX",
                    team_name: "DefaultTeam"
                  },
                  pace: -1,
                  shooting: -1,
                  passing: -1,
                  dribbling: -1,
                  defending: -1,
                  physic: -1,
                  attacking_crossing: -1,
                  attacking_finishing: -1,
                  attacking_heading_accuracy: -1,
                  attacking_short_passing: -1,
                  attacking_volleys: -1,
                  skill_dribbling: -1,
                  skill_curve: -1,
                  skill_fk_accuracy: -1,
                  skill_long_passing: -1,
                  skill_ball_control: -1,
                  movement_acceleration: -1,
                  movement_sprint_speed: -1,
                  movement_agility: -1,
                  movement_reactions: -1,
                  movement_balance: -1,
                  power_shot_power: -1,
                  power_jumping: -1,
                  power_stamina: -1,
                  power_strength: -1,
                  power_long_shots: -1,
                  mentality_aggression: -1,
                  mentality_interceptions: -1,
                  mentality_positioning: -1,
                  mentality_vision: -1,
                  mentality_penalties: -1,
                  defending_marking_awareness: -1,
                  defending_standing_tackle: -1,
                  defending_sliding_tackle: -1,
                  goalkeeping_diving: -1,
                  goalkeeping_handling: -1,
                  goalkeeping_kicking: -1,
                  goalkeeping_positioning: -1,
                  goalkeeping_reflexes: -1
                }
              }
            }
          ]
        }
      }
    }
  ]
);

--------------------------------------------------------------------------------------------------------------------------------------

Same operation above but for Coaches

db.Coaches.updateMany(
  {}, // Filter for all documents
  [
    {
      $set: {
        team: {
          $concatArrays: [
            "$team", // This is the existing array
            {
              $map: {
                input: {
                  $range: [
                    0,
                    {
                      $subtract: [
                        10,
                        { $size: "$team" }
                      ]
                    }
                  ]
                },
                as: "i",
                in: { // Default object structure
                  
					team_mongo_id : "XXXXXXXXXXXX",
					team_name : "DefaultTeamName",
					fifa_version : -1
                }
              }
            }
          ]
        }
      }
    }
  ]
);

-------------------------------------------------------------------------------------------------------------------------------------

Same operation above but for Teams

db.Teams.updateMany(
  {}, // Filter for all documents
  [
    {
      $set: {
        fifaStats: {
          $concatArrays: [
            "$fifaStats", // This is the existing array
            {
              $map: {
                input: {
                  $range: [
                    0,
                    {
                      $subtract: [
                        10,
                        { $size: "$fifaStats" }
                      ]
                    }
                  ]
                },
                as: "i",
                in: { // Default object structure
                  
					fifa_version : -1,
					home_stadium : "DefaultStadiumName",
					overall : -1,
					attack : -1,
					midfield : -1,
					defence : -1,
					club_worth_eur : -1,
					coach : {
						coach_mongo_id: "XXXXXXXXXXXX",
						coach_name : "DefaultCoachName" }
                }
              }
            }
          ]
        }
      }
    }
  ]
);


_____________________________________________________________________________________________________________________________________
//Function for hashing the password

//Function for hashing the password

//Function for hashing the password
const crypto = require('crypto');

function createSHA256Hash(inputString) {
    const hash = crypto.createHash('sha256');
    hash.update(inputString);
    return hash.digest('hex');
}

// Function to generate a random alphanumeric password
function generateRandomPassword(length = 12) {
    const chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
    let password = "";
    for (let i = 0; i < length; i++) {
        password += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return createSHA256Hash(password);
}

//Function to generate random signup date
const startDate= new Date(2019,1,1);
const endDate= new Date(2022,12,31);
function generateRandomDate(startDate, endDate) {
  // Check if the input dates are valid
  if (!(startDate instanceof Date) || !(endDate instanceof Date)) {
    console.error("Invalid input: Both startDate and endDate must be Date objects.");
    return null;
  }

  // Check if startDate is before endDate
  if (startDate > endDate) {
    console.error("Invalid input: startDate must be before endDate.");
    return null;
  }

  // Calculate the time difference in milliseconds
  const startTime = startDate.getTime();
  const endTime = endDate.getTime();
  const timeDifference = endTime - startTime;

  // Generate a random time within the range
  const randomTime = Math.random() * timeDifference;

  // Create a new Date object with the random time
  const randomDate = new Date(startTime + randomTime);

  // Return a new Date object with only the year, month, and day.
  const year = randomDate.getFullYear();
  const month = randomDate.getMonth();
  const day = randomDate.getDate();
  return new Date(year, month, day).toLocaleDateString();
}

// Retrieve all distinct authors from the Articles collection
const articles = db.Articles.find();
const authorPatterns = [" / Author","By "," and ","GFFN | "];

// Iterate over each author to create a corresponding user
articles.forEach(article => {
    // Skip entries where the author field and publish time , null or empty
    //also some articles don't have an author correctly set
    //instead they have a long phrase
    //if the string is longer than 5 words

    let varAuthor=article.author;
    

    if (!varAuthor || varAuthor.length==0 || varAuthor.split(" ").length>5|| varAuthor=="Author not found") {
        return;
    }
    

    //removing if present some string patterns
    authorPatterns.forEach(pattern => {
    	if (varAuthor.includes(pattern)) {
		varAuthor=varAuthor.replace(pattern,"");
    	}
    });

    // Check if a user with the same username already exists
    if (db.Users.findOne({ username: varAuthor })) {
        return;
    }
    
    // Create the user document with username, random password, and role
    db.Users.insertOne({
        username: varAuthor,
        password: generateRandomPassword(),
	signup_date:generateRandomDate(startDate,endDate),
        roles: ["ROLE_USER"]
    });
});
______________________________________________________________________________________________________________________________

const validUserUsernames = db.Users.find({}, { _id:0,username: 1 }).toArray().map(user => user.username);

// Step 2: Delete all articles where the author is not in the list of valid users
const result = db.Articles.deleteMany({
  author: { $nin: validUserUsernames }
});

print(`${result.deletedCount} articles deleted.`);


_____________________________________________________________________________
// Step 1: Get all valid usernames
const validUserUsernames = db.Users.find({}, { _id: 0, username: 1 }).toArray().map(user => user.username);

// Step 2: Delete all articles where the author is not in the list of valid users
const result = db.Articles.deleteMany({
  author: { $nin: validUserUsernames }
});

print(`${result.deletedCount} articles deleted.`);

function parseSignupDate(str) {
  const [day, month, year] = str.split('/').map(Number);
  return new Date(year, month - 1, day); // month is 0-indexed
}

function generateRandomDateAfter(startDate) {
  const now = new Date();
  const start = parseSignupDate(startDate).getTime();
  const end = now.getTime();
  const randomTime = new Date(start + Math.random() * (end - start));

  const year = randomTime.getFullYear();
  const month = randomTime.getMonth();
  const day = randomTime.getDate();
  return new Date(year, month, day).toLocaleDateString();
}

// Loop through each user
db.Users.find({}).forEach(user => {
  const username = user.username;
  const signupDate = user.signup_date;

  if (!signupDate) {
    print(`Skipping user ${username} (no subscription date)`);
    return;
  }

  const articles = db.Articles.find({
    author: username
  });

  articles.forEach(article => {
    const randomDate = generateRandomDateAfter(signupDate);

    db.Articles.updateOne(
      { _id: article._id },
      {
        $set: {
          publish_time: randomDate
        },
        $unset: {
          link: "",
          "publish-time": "",
          source: "",
          " ": ""
        }
      }
    );
  });

  print(`Updated articles for ${username}`);
});




___________________________________________________________________________________________-




