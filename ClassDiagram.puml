@startuml
+class Articles{
-_id: String
-author: String
-content: String
-publish_time: String
-title: String
}
+class Coaches{
-_id: String
-coach_id: Integer
-long_name: String
-short_name: String
-nationality_name: String
-gender: String
}
+class Players {
-_id: String 
-player_id: Long 
-short_name: String 
-long_name: String
-age: Integer 
-dob: Date 
-nationality_id: Long 
-nationality_name: String 
-height_cm: Integer
-weight_kg: Integer 
-fifaStats: List<FifaStatsPlayer>
-gender: String 
}
+class Teams{
-_id: String 
-team_id: Long 
-team_name: String 
-fifaStats: List<FifaStatsTeam>
-gender: String 
}
+class Users{
-_id: String 
-username: String
-password: String
-roles: List<ROLES>
-articles: List<Articles>
}
+class FifaStatsTeam{
-fifa_version: Integer
-coach_id: Long
-league_id: Long
-league_name: String
-league_level: Integer
-nationality_id: Long
-nationality_name: String
-home_stadium: String
-overall: Integer
-captain: Long
-club_worth_eur: Long
-attack: Integer
-defence: Integer
-midfield: Integer
-short_free_kick: Long
-long_free_kick: Long
-right_short_free_kick: Long
-left_short_free_kick: Long
-penalties: Long
-left_corner: Long
-right_corner: Long
-off_players_in_box: Integer
-off_corners: Integer
-off_free_kicks: Integer
}
+class FifaStatsPlayer{
-fifa_version: Integer
-player_positions: String
-overall: Integer
-potential: Integer
-value_eur: Long
-wage_eur: Long
-club_team_id: Long
-club_name: String
-club_position: String
-club_jersey_number: Integer
-club_contract_valid_until_year: Integer
-league_name: String
-league_level: Integer
-pace: Integer
-shooting: Integer
-passing: Integer
-defending: Integer
-physic: Integer
-attacking_crossing: Integer
-attacking_finishing: Integer
-attacking_heading_accuracy: Integer
-attacking_short_passing: Integer
-attacking_volleys: Integer
-skill_dribbling: Integer
-skill_curve: Integer
-skill_fk_accuracy: Integer
-skill_long_passing: Integer
-skill_ball_control: Integer
-movement_acceleration: Integer
-movement_sprintSpeed: Integer
-movement_agility: Integer
-movement_reactions: Integer
-movement_balance: Integer
-power_shot_power: Integer
-power_jumping: Integer
-power_stamina: Integer
-power_strength: Integer
-power_long_shots: Integer
-mentality_aggression: Integer
-mentality_interceptions: Integer
-mentality_positioning: Integer
-mentality_vision: Integer
-mentality_penalties: Integer
-defending_marking_awareness: Integer
-defending_standing_tackle: Integer
-defending_sliding_tackle: Integer
-goalkeeping_diving: Integer
-goalkeeping_handling: Integer
-goalkeeping_kicking: Integer
-goalkeeping_positioning: Integer
-goalkeeping_reflexes: Integer
}
class CoachesNode {
    -_id: Long
    -mongoId: String
    -coachId: Integer
    -longName: String
    -nationalityName: String
    -gender: String
    -teamMNodes: List<manages_team>
}

class PlayersNode {
    -_id: Long
    -mongoId: String
    -playerId: Long
    -longName: String
    -age: Integer
    -nationalityName: String
    -gender: String
    -teamMNodes: List<plays_in_team>
}

class TeamsNode {
    -_id: Long
    -mongoId: String
    -teamId: Long
    -teamName: String
    -gender: String
}

class UsersNode {
    -_id: Long
    -mongoId: String
    -userName: String
    -playersMNodes: List<has_in_M_team>
    -playersFNodes: List<has_in_F_team>
    -followings: List<UsersNode>
    -followers: List<UsersNode>
    -teamsNodes: List<TeamsNode>
    -coachesNodes: List<CoachesNode>
}
class has_in_F_team {
    -id: Long
    -fifaVersion: Integer
    -PFn: PlayersNode
    +has_in_F_team(PlayersNode player, Integer fifaVer)
    +getPlayer(): PlayersNode
    +getFifaV(): Integer
    +alreadyExist(PlayersNode player, Integer fifaV): boolean
    +alreadyExistPlayer(PlayersNode player): boolean
}

class has_in_M_team {
    -id: Long
    -fifaVersion: Integer
    -PMn: PlayersNode
    +has_in_M_team(PlayersNode player, Integer fifaVer)
    +getPlayer(): PlayersNode
    +getFifaV(): Integer
    +alreadyExist(PlayersNode player, Integer fifaV): boolean
    +alreadyExistPlayer(PlayersNode player): boolean
}

class manages_team {
    -id: Long
    -fifaVersion: Integer
    -TMn: TeamsNode
    +manages_team(TeamsNode team, Integer fifaV)
    +getCoach(): TeamsNode
    +getFifaV(): Integer
    +alreadyExist(TeamsNode existingTeam, Integer fifa_version): boolean
}

class plays_in_team {
    -id: Long
    -fifaVersion: Integer
    -TMn: TeamsNode
    +plays_in_team(TeamsNode team, Integer fifaV)
    +getTeam(): TeamsNode
    +getFifaV(): Integer
    +alreadyExist(TeamsNode team, Integer fifaV): boolean
}
interface Articles_repository {
    +findById(String id): Optional<Articles>
}

interface Coaches_repository {
    +findByCoachId(Long coach_id): Optional<Coaches>
    +findByGender(String gender): List<Coaches>
    +findAllByGender(String gender, PageRequest page): Page<Coaches>
}

interface Players_repository {
    +findPlayerWithFifaStats(String _id, Integer fifaVersion): Optional<Players>
    +findByGender(String gender): List<Players>
    +findByPlayerId(Long playerId): Optional<Players>
    +findAllByGender(String gender, PageRequest page): Page<Players>
}

interface Teams_repository {
    +findByTeamId(Long team_id): Optional<Teams>
    +findByGender(String gender): List<Teams>
    +findAllByGender(String gender, PageRequest page): Page<Teams>
}

interface Coaches_node_rep {
    +existsByMongoId(String valueOf): boolean
    +findByMongoId(String id): Optional<CoachesNode>
    +findByCoachId(Integer coachId): Optional<CoachesNode>
    +findAllByGender(String gender): List<CoachesNode>
}

interface Players_node_rep {
    +existsByMongoId(String mongoId): boolean
    +findByMongoId(String get_id): Optional<PlayersNode>
    +findByPlayerId(Long playerId): Optional<PlayersNode>
    +findAllByGender(String gender): List<PlayersNode>
}

interface Teams_node_rep {
    +existsByMongoId(String valueOf): boolean
    +findByMongoId(String get_id): Optional<TeamsNode>
    +findByTeamId(Long teamId): Optional<TeamsNode>
    +findAllByGender(String gender): List<TeamsNode>
}

interface Users_node_rep {
    +existsByMongoId(String valueOf): boolean
    +findByMongoId(String get_id): Optional<UsersNode>
    +findByUserName(String username): Optional<UsersNode>
    +findFollowingsByUserName(String username): List<UsersNodeProjection>
    +findFollowersByUserName(String username): List<UsersNodeProjection>
    +createFollowRelation(String fromUsername, String toUsername): void
    +removeFollowingRelationship(String from, String to): void
    +removeFollowerRelationship(String from, String to): void
    +findUserWithAllRelationships(String username): List<UsersNode>
}
interface Articles_repository {
    +findById(String id): Optional<Articles>
    +findAll(PageRequest pageable): Page<Articles>
    +save(Articles article): Articles
    +deleteById(String id): void
}

interface Coaches_repository {
    +findById(String id): Optional<Coaches>
    +findByCoachId(Long coach_id): Optional<Coaches>
    +findByGender(String gender): List<Coaches>
    +findAllByGender(String gender, PageRequest page): Page<Coaches>
    +save(Coaches coach): Coaches
    +deleteById(String id): void
}

interface Players_repository {
    +findById(String id): Optional<Players>
    +findPlayerWithFifaStats(String _id, Integer fifaVersion): Optional<Players>
    +findByGender(String gender): List<Players>
    +findByPlayerId(Long playerId): Optional<Players>
    +findAllByGender(String gender, PageRequest page): Page<Players>
    +save(Players player): Players
    +deleteById(String id): void
}

interface Teams_repository {
    +findById(String id): Optional<Teams>
    +findByTeamId(Long team_id): Optional<Teams>
    +findByGender(String gender): List<Teams>
    +findAllByGender(String gender, PageRequest page): Page<Teams>
    +save(Teams team): Teams
    +deleteById(String id): void
}

interface Users_repository {
    +findById(String id): Optional<Users>
    +findByUsername(String username): Optional<Users>
    +findAll(PageRequest page): Page<Users>
    +save(Users user): Users
    +deleteById(String id): void
}

interface Coaches_node_rep {
    +existsByMongoId(String valueOf): boolean
    +findByMongoId(String id): Optional<CoachesNode>
    +findByCoachId(Integer coachId): Optional<CoachesNode>
    +findAllByGender(String gender): List<CoachesNode>
    +save(CoachesNode coachNode): CoachesNode
}

interface Players_node_rep {
    +existsByMongoId(String mongoId): boolean
    +findByMongoId(String get_id): Optional<PlayersNode>
    +findByPlayerId(Long playerId): Optional<PlayersNode>
    +findAllByGender(String gender): List<PlayersNode>
    +save(PlayersNode playerNode): PlayersNode
}

interface Teams_node_rep {
    +existsByMongoId(String valueOf): boolean
    +findByMongoId(String get_id): Optional<TeamsNode>
    +findByTeamId(Long teamId): Optional<TeamsNode>
    +findAllByGender(String gender): List<TeamsNode>
    +save(TeamsNode teamNode): TeamsNode
    +delete(TeamsNode teamNode): void
}

interface Users_node_rep {
    +existsByMongoId(String valueOf): boolean
    +findByMongoId(String get_id): Optional<UsersNode>
    +findByUserName(String username): Optional<UsersNode>
    +findFollowingsByUserName(String username): List<UsersNodeProjection>
    +findFollowersByUserName(String username): List<UsersNodeProjection>
    +createFollowRelation(String fromUsername, String toUsername): void
    +removeFollowingRelationship(String from, String to): void
    +removeFollowerRelationship(String from, String to): void
    +findUserWithAllRelationships(String username): List<UsersNode>
    +save(UsersNode userNode): UsersNode
    +delete(UsersNode userNode): void
}

class Articles_service {
    -Ar: Articles_repository
    +getArticle(String id): Articles
    +getAllArticles(PageRequest pageable): Page<Articles>
    +createArticle(Articles article): Articles
    +updateArticle(String id, Articles articleDetails): Articles
    +deleteArticle(String id): void
}

class Coaches_service {
    -CMr: Coaches_repository
    -Cmr: Coaches_node_rep
    -CMs: Coaches_node_service
    +getCoach(String id): Coaches
    +getAllCoaches(PageRequest page, String gender): Page<Coaches>
    +createCoach(Coaches coach): Coaches
    +updateCoach(String id, Coaches coachDetails): Coaches
    +deleteCoach(String id): void
}

class Players_service {
    -PMr: Players_repository
    -Pmr: Players_node_rep
    -PMs: Players_node_service
    +getPlayer(String id): Players
    +getAllPlayers(String gender): List<PlayersNode>
    +getAllPlayers(PageRequest page, String gender): Page<Players>
    +createPlayer(Players player): Players
    +updatePlayer(String id, Players playerDetails): Players
    +deletePlayer(String id): void
    +showLastYearStats(Long playerId): FifaStatsPlayer
    +showSpecificStats(Long playerId, Integer fifaV): FifaStatsPlayer
}

class Teams_service {
    -TMr: Teams_repository
    -Tmr: Teams_node_rep
    -PMr: Players_repository
    -CMr: Coaches_repository
    +getTeam(String id): Teams
    +getAllTeams(PageRequest page, String gender): Page<Teams>
    +createTeam(Teams team): Teams
    +updateTeam(String id, Teams teamsDetails): Teams
    +deleteTeam(String id): void
    +showCurrentFormation(Long teamId): List<Players>
    +showSpecificFormation(Long teamId, Integer fifaV): List<Players>
    +showCurrentCoach(Long teamId): Coaches
    +showSpecificCoach(Long teamId, Integer fifaV): Coaches
}

class Users_service {
    -Ur: Users_repository
    -UNr: Users_node_rep
    -UNs: Users_node_service
    -passwordEncoder: PasswordEncoder
    -Ar: Articles_repository
    +getAllUsers(PageRequest page): Page<Users>
    +getUserById(String id): Users
    +createUser(createUserRequest request): Users
    +updateUser(String id, Users updatedUser): Users
    +deleteUser(String id): void
    +createArticle(String username, createArticleRequest request): Articles
    +showUserArticles(String username): List<Articles>
    +showUserArticle(String username, String articleId): Articles
    +modifyArticle(String username, String articleId, createArticleRequest request): Articles
    +registerUser(String username, String password): Users
    +changePassword(String username, String oldPassword, String newPassword): String
}
class Coaches_node_service {
    -CMn: Coaches_node_rep
    -Cmr: Coaches_repository
    -TMn: Teams_node_rep
    -TMr: Teams_repository
    +getCoach(Integer coach_id): CoachesNode
    +getAllCoaches(String gender): List<CoachesNode>
    +updateCoach(Long id, CoachesNode coachDetails): CoachesNode
    +MapAllTheNodes(): String
    +deleteCoach(Long id): void
    +MapAllManagesTeam(String gender): String
    +showTrainedHistory(Integer coachId): List<manages_team>
    +showCurrentTeam(Integer coachId): manages_team
    +showSpecificTeam(Integer coachId, Integer fifaV): manages_team
}

class Players_node_service {
    -PMn: Players_node_rep
    -PMr: Players_repository
    -TMn: Teams_node_rep
    -TMr: Teams_repository
    +getPlayers(Long id): PlayersNode
    +getAllPlayers(String gender): List<PlayersNode>
    +updatePlayer(Long id, PlayersNode playerDetails): PlayersNode
    +MapAllTheNodes(): String
    +MapAllPlaysInTeamRel(String gender): String
    +deletePlayer(Long id): void
    +showCurrentTeam(Long playerId): plays_in_team
    +showSpecificTeam(Long playerId, Integer fifaVersion): plays_in_team
}

class Teams_node_service {
    -TMn: Teams_node_rep
    -TMr: Teams_repository
    +getTeams(Long id): TeamsNode
    +getAllTeams(String gender): List<TeamsNode>
    +updateTeam(Long id, TeamsNode teamDetails): TeamsNode
    +MapAllTheNodes(): String
    +deleteTeam(Long id): void
}

class Users_node_service {
    -Unr: Users_node_rep
    -Ur: Users_repository
    -PMNr: Players_node_rep
    -PMr: Players_repository
    -TMn: Teams_node_rep
    -CMn: Coaches_node_rep
    +getUsers(Long id): UsersNode
    +getAllUsers(): List<UsersNode>
    +updateUser(Long id, UsersNode userDetails): UsersNode
    +deleteUser(Long id): void
    +mapAllUsersToNeo4j(): String
    +addInMTeam(String username, Long playerId, Integer fifaVersion): String
    +addInFTeam(String username, Long playerId, Integer fifaVersion): String
    +ShowUserMPlayersStats(String username): List<FifaStatsPlayer>
    +ShowUserFPlayersStats(String username): List<FifaStatsPlayer>
    +ShowUserMPlayers(String username): List<has_in_M_team>
    +ShowUserFPlayers(String username): List<has_in_F_team>
    +removePlayerMTeam(String username, Long playerId): void
    +removePlayerFTeam(String username, Long playerId): void
    +FOLLOW(String Username, String targetUsername): void
    +UNFOLLOW(String Username, String targetUsername): void
    +getFollowings(String username): List<UsersNodeProjection>
    +getFollowedBy(String username): List<UsersNodeProjection>
    +team_LIKE(String username, Long teamId): String
    +team_UNLIKE(String username, Long teamId): String
    +coach_LIKE(String username, Integer coachId): String
    +coach_UNLIKE(String username, Integer coachId): String
}
class RegisterUserRequest {
    -username: String
    -password: String
}

class LikeRequest {
    -targetId: Long
}

class FollowRequest {
    -follower: String
    -followee: String
}

class createUserRequest {
    -username: String
    -password: String
    -roles: List<ROLES>
    +createUserRequest(String username, String password, List<ROLES> roles)
}

class createArticleRequest {
    -author: String
    -content: String
    -publish_time: String
    -title: String
    +createArticleRequest(String title, String content)
}

class ChangePasswordRequest {
    -oldPassword: String
    -newPassword: String
}

class AddPlayerToTeamRequest {
    -playerId: Long
    -fifaValue: Integer
}

interface UsersNodeProjection {
    +getUserName(): String
    +getMongoId(): String
}

enum ROLES {
    ROLE_USER
    ROLE_ADMIN
}

class Articles_controller {
    -articlesService: Articles_service
    +getArticle(String id): Articles
    +getAllArticles(int page, int size): Page<Articles>
    +createArticle(Articles article): Articles
    +updateArticle(String id, Articles details): Articles
    +deleteArticle(String id): ResponseEntity<Void>
}

class Coaches_controller {
    -coachesMservice: Coaches_service
    +getCoach(String _id): Coaches
    +getAllCoaches(int page, int size, String gender): Page<Coaches>
    +createCoach(Coaches coach): Coaches
    +updateCoach(String _id, Coaches coachDetails): Coaches
    +deleteCoach(String _id): ResponseEntity<Void>
}

class Players_controller {
    -playersMService: Players_service
    +getPlayer(String _id): Players
    +getAllPlayers(int page, int size, String gender): Page<Players>
    +createPlayer(Players player): Players
    +updatePlayer(String _id, Players playerDetails): Players
    +deletePlayer(String _id): ResponseEntity<Void>
    +getLastYearStats(Long playerId): FifaStatsPlayer
    +getSpecificYearStats(Long playerId, Integer fifaV): FifaStatsPlayer
}

class Teams_controller {
    -teamsMService: Teams_service
    +getTeam(String _id): Teams
    +getAllTeams(int page, int size, String gender): Page<Teams>
    +showCurrentFormation(Long teamId): List<Players>
    +showSpecificFormation(Long teamId, Integer fifaV): List<Players>
    +showCurrentCoach(Long coachId): Coaches
    +showSpecificCoach(Long coachId, Integer fifaV): Coaches
    +createTeam(Teams team): Teams
    +updateTeam(String _id, Teams teamDetails): Teams
    +deleteTeam(String _id): ResponseEntity<Void>
}
class Users_controller {
    -usersService: Users_service
    +getAllUsers(int page, int size): Page<Users>
    +getUserById(String id): Users
    +createUser(createUserRequest user): Users
    +updateUser(String id, Users updatedUser): Users
    +deleteUser(String id): ResponseEntity<Void>
    +createArticle(createArticleRequest request, Authentication auth): Articles
    +getAllArticles(Authentication auth): List<Articles>
    +getArticle(String articleId, Authentication auth): Articles
    +modifyArticle(Long articleId, createArticleRequest request, Authentication auth): Articles
    +register(RegisterUserRequest request): Users
    +changePassword(ChangePasswordRequest request, Authentication auth): String
}

class Users_node_controller {
    -Uns: Users_node_service
    -authenticationManager: AuthenticationManager
    +getUser(Long id): UsersNode
    +getAllUsers(): List<UsersNode>
    +getFifaMStats(Authentication auth): List<FifaStatsPlayer>
    +getFifaFStats(Authentication auth): List<FifaStatsPlayer>
    +geMPlayers(Authentication auth): List<has_in_M_team>
    +getFPlayers(Authentication auth): List<has_in_F_team>
    +getFollowings(Authentication auth): List<UsersNodeProjection>
    +getFollowedBy(Authentication auth): List<UsersNodeProjection>
    +MapAllUsers(): String
    +removeMPlayer(Long playerId, Authentication auth): void
    +removeFPlayer(Long playerId, Authentication auth): void
    +FOLLOW(FollowRequest request): void
    +UNFOLLOW(FollowRequest request): void
    +add_in_M_Team(AddPlayerToTeamRequest request, Authentication auth): String
    +add_in_F_Team(AddPlayerToTeamRequest request, Authentication auth): String
    +teamLIKE(LikeRequest request, Authentication auth): String
    +teamUNLIKE(LikeRequest request, Authentication auth): String
    +coachLIKE(LikeRequest request, Authentication auth): String
    +coachUNLIKE(LikeRequest request, Authentication auth): String
}

class Teams_node_controller {
    -teamsNodeService: Teams_node_service
    +getTeamById(Long id): TeamsNode
    +getAllTeamsByGender(String gender): List<TeamsNode>
    +mapAllNodes(): String
}

class Players_node_controller {
    -playersNodeService: Players_node_service
    +getPlayerById(Long id): PlayersNode
    +getAllPlayersByGender(String gender): List<PlayersNode>
    +showCurrentTeam(Long playerId): plays_in_team
    +showSpecificTeam(Long playerId, Integer fifaV): plays_in_team
    +mapAllPlaysInTeam(String gender): String
    +mapAllPlayersToNeo4j(): String
}

class Coaches_node_controller {
    -coachesMNodeService: Coaches_node_service
    +getCoach(Integer id): CoachesNode
    +getAllCoaches(String gender): List<CoachesNode>
    +showTrainedHistory(Integer coachId1): List<manages_team>
    +showCurrenTraining(Integer coachId): manages_team
    +showSpecificTraining(Integer coachId, Integer fifaV): manages_team
    +mapAllNodes(): String
    +mapManagesTeam(String gender): String
}

Users_controller ..> Users_service : uses
Users_node_controller ..> Users_node_service : uses
Teams_node_controller ..> Teams_node_service : uses
Players_node_controller ..> Players_node_service : uses
Coaches_node_controller ..> Coaches_node_service : uses
Articles_controller ..> Articles_service : uses
Coaches_controller ..> Coaches_service : uses
Players_controller ..> Players_service : uses
Teams_controller ..> Teams_service : uses

Coaches_node_service ..> Coaches_node_rep : uses
Coaches_node_service ..> Coaches_repository : uses
Coaches_node_service ..> Teams_node_rep : uses
Coaches_node_service ..> Teams_repository : uses

Players_node_service ..> Players_node_rep : uses
Players_node_service ..> Players_repository : uses
Players_node_service ..> Teams_node_rep : uses
Players_node_service ..> Teams_repository : uses

Teams_node_service ..> Teams_node_rep : uses
Teams_node_service ..> Teams_repository : uses

Users_node_service ..> Users_node_rep : uses
Users_node_service ..> Users_repository : uses
Users_node_service ..> Players_node_rep : uses
Users_node_service ..> Players_repository : uses
Users_node_service ..> Teams_node_rep : uses
Users_node_service ..> Coaches_node_rep : uses
Articles_service ..> Articles_repository : uses
Coaches_service ..> Coaches_repository : uses
Coaches_service ..> Coaches_node_rep : uses
Players_service ..> Players_repository : uses
Players_service ..> Players_node_rep : uses
Teams_service ..> Teams_repository : uses
Teams_service ..> Teams_node_rep : uses
Teams_service ..> Players_repository : uses
Teams_service ..> Coaches_repository : uses
Users_service ..> Users_repository : uses
Users_service ..> Users_node_rep : uses
Users_service ..> Articles_repository : uses
Articles_repository ..> Articles 
Coaches_repository ..> Coaches 
Players_repository ..> Players 
Teams_repository ..> Teams 
Coaches_node_rep ..> CoachesNode 
Players_node_rep ..> PlayersNode 
Teams_node_rep ..> TeamsNode 
Users_node_rep ..> UsersNode 
CoachesNode "1" o-- "many" manages_team : manages
PlayersNode "1" o-- "many" plays_in_team : plays in
UsersNode "1" o-- "many" has_in_M_team : has in male team
UsersNode "1" o-- "many" has_in_F_team : has in female team
UsersNode "1" o-- "many" UsersNode : follows
UsersNode "1" o-- "many" TeamsNode : likes team
UsersNode "1" o-- "many" CoachesNode : likes coach
Users "1" o-- "many" Articles : writes
Players "1" *-- "many" FifaStatsPlayer : has stats
Teams "1" *-- "many" FifaStatsTeam : has stats
@enduml